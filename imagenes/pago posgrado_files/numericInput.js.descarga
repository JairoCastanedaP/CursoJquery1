///////////////////////////////////////////////////////////////
//	Author: Joshua De Leon
//	File: numericInput.js
//	Description: Allows only numeric input in an element.
//	
//	If you happen upon this code, enjoy it, learn from it, and 
//	if possible please credit me: www.transtatic.com
///////////////////////////////////////////////////////////////

//	Sets a keypress event for the selected element allowing only numbers. Typically this would only be bound to a textbox.
(function ($) {
    // Plugin defaults
    var defaults = {
        allowFloat: false,
        allowNegative: false,
        isCreditCard: false,
        groupBy: 4,
        maxGroupsCount: 4,
        groupSeparator: '-'
    };

    // Plugin definition
    //	allowFloat: (boolean) Allows floating point (real) numbers. If set to false only integers will be allowed. Default: false.
    //	allowNegative: (boolean) Allows negative values. If set to false only positive number input will be allowed. Default: false.
    $.fn.numericInput = function (options) {
        var settings = $.extend({}, defaults, options);
        var allowFloat = settings.allowFloat;
        var allowNegative = settings.allowNegative;
        var isCreditCard = settings.isCreditCard;
        var groupBy = settings.groupBy;
        var maxGroupsCount = settings.maxGroupsCount;
        var groupSeparator = settings.groupSeparator;

        this.keypress(function (event) {
            var inputCode = event.which;
            var currentValue = $(this).val();

            if (inputCode > 0 && (inputCode < 48 || inputCode > 57))	// Checks the if the character code is not a digit
            {
                if (allowFloat == true && inputCode == 46)	// Conditions for a period (decimal point)
                {
                    //Disallows a period before a negative
                    if (allowNegative == true && getCaret(this) == 0 && currentValue.charAt(0) == '-')
                        return false;

                    //Disallows more than one decimal point.
                    if (currentValue.match(/[.]/))
                        return false;
                }

                else if (allowNegative == true && inputCode == 45)	// Conditions for a decimal point
                {
                    if (currentValue.charAt(0) == '-')
                        return false;

                    if (getCaret(this) != 0)
                        return false;
                }

                else if (inputCode == 8) 	// Allows backspace
                    return true;

                else								// Disallow non-numeric
                    return false;
            }

            else if (inputCode > 0 && (inputCode >= 48 && inputCode <= 57))	// Disallows numbers before a negative.
            {
                if (isCreditCard) {
                    $(this).val(function (i, v) {
                        var _clean = currentValue.replace(/[^\d]/g, '');
                        var _new = _clean.length < this.maxLength ? _clean + String.fromCharCode(inputCode) : _clean;
                        var _first16 = _new.substring(0, groupBy * maxGroupsCount);
                        var _extras = _new.substring(groupBy * maxGroupsCount, _new.length);
                        var _regex = new RegExp(".{1," + groupBy + "}", "g");
                        var _groups = _first16.match(_regex);

                        if (_extras)
                            _groups.push(_extras);

                        return _groups ? _groups.join(groupSeparator) : '';
                    });

                    return false;
                }
                else if (allowNegative == true && currentValue.charAt(0) == '-' && getCaret(this) == 0)
                    return false;
            }
        });

        this.keyup(function (event) {

            if (!isCreditCard)
                return true;

            $(this).val(function (i, v) {
                return v.slice(-1) == groupSeparator ? v.replace(/.$/, '') : v;
            });

            var _cleanValue = $(this).val().replace(/[^\d]/g, '');

            $(this).trigger('card.lookup', _cleanValue);
            $(this).trigger('card.luhn', _cleanValue);

            return false;
        });

        $(this).on("paste", function (e) {
            e.preventDefault();
        });

        return this;
    };


    // Private function for selecting cursor position. Makes IE play nice.
    //	http://stackoverflow.com/questions/263743/how-to-get-caret-position-in-textarea
    function getCaret(element) {
        if (element.selectionStart)
            return element.selectionStart;

        else if (document.selection) //IE specific
        {
            element.focus();

            var r = document.selection.createRange();
            if (r == null)
                return 0;

            var re = element.createTextRange(),
			rc = re.duplicate();
            re.moveToBookmark(r.getBookmark());
            rc.setEndPoint('EndToStart', re);
            return rc.text.length;
        }

        return 0;
    };

}(jQuery));