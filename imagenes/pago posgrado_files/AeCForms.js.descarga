////////////////////////////////////////////////////////////////////////////////
//// JS donde se concentran las validaciones y formateos de INPUT de Formularios
////////////////////////////////////////////////////////////////////////////////

///Formato de Fechas
var dateFormat = 'DD/MM/YYYY';

///Arreglo de formatos para moneda
var currency = {
    generic: {
        mDec: 2,
        aSep: ',',
        aDec: '.',
        aPad: true,
        lZero: 'keep',
        anDefault: '',
        aSign: "$"
    },
    es_CO: {
        mDec: 2,
        aSep: '.',
        aDec: ',',
        aPad: true,
        lZero: 'keep',
        anDefault: '',
        aSign: "$"
    }
};

///Obtiene la configuración de Currency para el data-culture especificado
function getControlLanguage(dataCulture) {

    var _lang = currency[dataCulture];

    if (!_lang)
        _lang = currency["generic"];

    return jQuery.extend({}, _lang);
}

//Valida que el texto introducido sea un patrón de Email
function testForEmailFormat(sender, args) {

    var emailPattern = /[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?\.)+[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?/; //EP-110

    args.IsValid = emailPattern.test(args.Value);
}

//Inicializa la libreria JS autoNumeric para formatear el INPUT a Currency
function toCurrency() {

    var _lang = getControlLanguage($(this).attr("data-culture"));
    $(this).autoNumeric(_lang);
}

//Inicializa la libreria JS autoNumeric para formatear el INPUT con Formato Numérico
function toDecimal() {

    var _lang = getControlLanguage($(this).attr("data-culture"));

    if (!isNaN($(this).attr("data-min-number")))
        _lang.vMin = $(this).attr("data-min-number");

    if (!isNaN($(this).attr("data-max-number")))
        _lang.vMax = $(this).attr("data-max-number");

    if (!isNaN($(this).attr("data-decimal-places")))
        _lang.mDec = $(this).attr("data-decimal-places");

    _lang.aSign = '';
    $(this).autoNumeric(_lang);
}

///Valida que sólo se digiten letras dentro del INPUT
function toText(e) {

    var code = e.keyCode ? e.keyCode : e.which;

    ///Solo se permite backspace, espacios y Letras a-z, A-Z, ñ, Ñ
    return code == 8 || code == 32 || (code > 96 && code < 123) || (code > 64 && code < 91) || code == 241 || code == 209;
}

///Inicializa el control para mostrar un Calendario
///Se habilitan DropDownList en Mes y Año para agilizar la selección de fechas
function toCalendar() {

    $(this).daterangepicker({
        singleDatePicker: true,
        autoUpdateInput: false,
        showDropdowns: true/*,
        locale: {
            format: dateFormat,
            cancelLabel: "<i class='fa fa-eraser'></i>"
        }*/
    }).attr("readonly", "readonly").on('cancel.daterangepicker', function (ev, picker) {
        $(this).val('');
        $(this).trigger('blur');
    }).on('apply.daterangepicker', function (ev, picker) {
        $(this).val(picker.startDate.format(dateFormat));
    });
}

///Inicializa un control de On/Off estilo iOS para controles de tipo Boolean
function toOnOff() {
    new Switchery($(this)[0], {
        secondaryColor: '#c3c3c3'
    });
}

///Inicializa la libreria que formatea el número de la tarjeta
function toCreditCardNumber() {

    $(this).numericInput({
        isCreditCard: true,
        groupSeparator: ' '
    })
    .on('card.lookup', lookUpCardCompany);
}

//Valida el número de Tarjeta ingresado contra el Algoritmo Luhn
function testForLuhn(sender, args) {

    var cardNumber = args.Value.replace(/[^\d]/g, '');

    var isNumberValid = LuhnAlgorithm.validate(cardNumber);

    args.IsValid = isNumberValid;
}

//Busca el numero de tarjeta ingresado dentro de los rangos de cada imagen de Compañias de Tarjetas y resalta el que corresponda
function lookUpCardCompany(evt, cardNumber) {

    var alreadyMatched = false;

    $("img[data-trigger='findKeys']").each(function () {

        var ranges = Range.rangeWithString($(this).attr("data-val"));

        $(this).removeClass("active-img");
        
        if (ranges.match(cardNumber) && !alreadyMatched) {
            $(this).addClass("active-img");
            alreadyMatched = true;
        }
    });
}

//Dispara el validador de la fecha de expiración, con una fecha mínima de hoy y máxima de (hoy + maxLength años)
function testForCardExpiration(sender, args) {
    
    var yearLength = $(document.getElementById(sender.controltovalidate)).attr('maxlength') || 0;
    var isDateValid = CardExpiry.validate(args.Value, yearLength);

    args.IsValid = isDateValid;
}

///Inicializa la libreria de validación para la fecha de expiración con formato 'MM / YY'
function toCardExpiry() {
    CardExpiry.format($(this));
}

///Inicializa la libreria de Bandera y Código de País para ingresar teléfonos
function toIntlTelInput() {

    var $input = $(this);
    var _intl = window.intlTelInputGlobals.getInstance($input[0]);

    if (_intl)
        _intl.destroy();

    var $hidden = $input.parent().next('input:hidden');
    var $selCountry = JSON.parse($hidden.val());

    _intl = window.intlTelInput($input[0], {
        initialCountry: $selCountry.iso2,
        preferredCountries: [$selCountry.iso2],
        localizedCountries: _locCountries,
        separateDialCode: true,
        dropdownContainer: document.body,
        utilsScript: "../Scripts/UI/intl-tel-input/utils.js"
    });

    $input.off('countrychange');
    $input.on('countrychange', { intl: _intl, countryHolder: $hidden }, onCountryChanged);
    $input.trigger('countrychange');

    if ($selCountry.number)
        _intl.setNumber($selCountry.number);
}

///Cuando se selecciona un pais, se actualiza el dialCode definido
function onCountryChanged(e) {
    var _current = e.data.intl.getSelectedCountryData();
    e.data.countryHolder.val(JSON.stringify({
        iso2: _current.iso2,
        dialCode: "+" + _current.dialCode
    }));
}

//Valida que el campo de intl-tel-input (teléfono) tenga valor
function testForTelNumber(sender, args) {

    var _val = $(document.getElementById(sender.controltovalidate)).find('input:text').val();

    args.IsValid = _val !== undefined && _val !== '';
}

//Valida que el campo de Numero de Identificacion sea 10 caracteres cuando es NIT
function testForIdNumber(sender, args) {

    var _idType = $('select[data-refcode="3"]').val();
    var _isValid = true;

    if (_idType === "NIT") {
        _isValid = args.Value.length === 10;
    }

    args.IsValid = _isValid;
}

//Valida que el campo permita únicamente campos de Letras y Números
function toTextNumber(e) {

    var code = e.keyCode ? e.keyCode : e.which;

    ///Solo se permite backspace, Letras a-z, A-Z, ñ, Ñ
    return (code > 96 && code < 123) || (code > 64 && code < 91) || (code > 47 && code < 58) || code === 241 || code === 209;
}

//Valida que se capture la longitud requerida del campo
function testForRequiredLength(sender, args) {

    var _rule = $(document.getElementById(sender.controltovalidate)).data('reqlength');
    var _isValid = true;

    if (_rule !== undefined && _rule !== '') {

        var _inputLength = args.Value.length;

        if (_rule.toString().startsWith('-')) {
            _isValid = _inputLength <= parseInt(_rule.toString().split('-')[1]);
        }
        else if (_rule.toString().includes('-')) {
            var _split = _rule.split('-');
            _isValid = _inputLength >= parseInt(_split[0]) && _inputLength <= parseInt(_split[1]);
        }
        else if (_rule.toString().includes(',')) {
            var _split = _rule.split(',');
            _isValid = _split.includes(_inputLength.toString());
        }
        else {
            _isValid = _rule === _inputLength;
        }
    }

    args.IsValid = _isValid;
}