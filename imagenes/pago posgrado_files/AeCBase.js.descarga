///////////////////////////////////////////////////////////
//// JS donde se inicializan las librerias de JQuery o JS
///////////////////////////////////////////////////////////

///Referencia al método Page_Load en un AsyncPostBack
var basePageLoad = pageLoad;
///Referencia al método onItemSelected del control AutoComplete
var baseOnItemSelected = onItemSelected;
//Referencia al método onItemChange del control AutoComplete
var baseOnItemChange = onItemChange;
//URL al servicio de sugerencias para los controles de Autocompletado
var _autocompleteUrl = "/Utilities/AutocompleteService.asmx/";

///Método Page_Load del Ciclo de Vida del lado del Cliente
///Se inicializan todas las librerías de JS en cada AsyncPostBack
function pageLoad(sender, args) {

    moment.locale('es');
    
    InitCommonTriggers();
    InitControlStyles();
    InitIntlTelInput();
    InitDismissableAlerts();
}

///Inicializa los eventos de los elementos de la pagina que contengan el atributo data-trigger
function InitCommonTriggers() {

    $('[data-trigger="smartPlaceHolder"]').SmartPlaceholders();
    $('a[data-trigger="printer"]').on("click", printWindow);
    //EP-037
    $('a[data-trigger="printerStatus"]').on("click", printPopUp);

    $('div[data-trigger="modalOnClose"]').each(function () {

        var _validator = $(this).attr("data-validator");

        $(this).on("hidden.bs.modal", function (e) {
            PNotify.removeAll();
            var sender = $("#" + e.target.id);

            if (_validator)
                clearControls(sender, _validator);
        });

    });

    $('a[data-trigger="tab"]').on("click", function (e) {

        var sender = $(this);
        var pnlContent = sender.attr("data-val");

        if (!$(pnlContent).is(":visible")) {
            PNotify.removeAll();
        }
    });

    $('div.modal').on("shown.bs.modal", function (e) {
        InitIntlTelInput();
    });

    $('div[data-trigger="autocomplete"]').each(OnAutocomplete);
}

///Inicializa las librerias que habilitan cierto estilos sobre los controles con el atributo data-toggle y data-type
///Se habilitan los Tooltips, o las validaciones definidas sobre los formularios dinamicos
function InitControlStyles() {

    $('[data-toggle="tooltip"]').tooltip({ container: 'body' });

    $('span.tableflat').iCheck({
        checkboxClass: 'icheckbox_flat-blue',
        radioClass: 'iradio_flat-blue'
    });

    $('span[data-type="currency"], input[data-type="currency"], label[data-type="currency"]').each(toCurrency);
    $('span[data-type="decimal"], input[data-type="decimal"]').each(toDecimal);
    $('input[data-type="numeric"]').numericInput();
    $('input[data-type="text"]').on("keypress", toText);
    $('input[data-type="calendar"]').each(toCalendar);
    $('span[data-type="OnOff"] input[type="checkbox"]').each(toOnOff);
    $('input[data-type="creditCard"]').each(toCreditCardNumber);
    $('input[data-type="cardExpiry"]').each(toCardExpiry);
    $('input[data-type="textNumber"]').on("keypress", toTextNumber);
}

///Inicializa el plugin de intl-tel-input en cada postback
function InitIntlTelInput() {
    $('input[data-plugin="intlTel"]').each(toIntlTelInput);
    $('input[data-plugin="intlTel"]').closest('div[data-refcode]').addClass('inline');
}

///Muestra (si existe) como Modal el control (comunmente divs) que tenga el ID especificado
function showModal(modalClientID) {

    var _modal = $("#" + modalClientID);

    if (_modal)
        _modal.modal("show");
}

///Oculta (si existe) el Modal que tenga el ID especificado
function hideModal(modalClientID) {

    var _modal = $("#" + modalClientID);

    if (_modal)
        _modal.modal("hide");

    return true;
}

///Oculta el Modal que tenga el ID especificado, solo si los validadores pertenecientes a validationGroup han sido validados 
function hideValidationModal(modalClientID, validationGroup) {

    if (Page_ClientValidate(validationGroup)) {
        return hideModal(modalClientID);
    }

    return false;
}

///Muestra una notificación con la configuración default
function showAlertNotification(title, message) {
    return showPNotificaction(title, message, 'alert-info', false);
}

///Crea una notificación con PNotify de acuerdo a las opciones especificadas
function showPNotificaction(title, message, type, willHide, delay) {

    var options = {};

    if (title != undefined && title != null && title != '')
        options.title = title;

    if (message != undefined && message != null && message != '')
        options.text = message;

    if (type != undefined && type != null && type != '')
        options.type = type;

    if (typeof willHide == "boolean")
        options.hide = willHide;
    else if (typeof willHide == "string" && willHide != '')
        options.hide = willHide.toLowerCase() == 'true' || willHide.toLowerCase() == '1';

    if (!isNaN(parseInt(delay)))
        options.delay = delay;

    return new PNotify(options);
}

///Muestra el Modal Default (en MasterPage) que muestra un mensaje y botón para mostrar un mensaje genérico al usuario
function showAlertModal(title, message, redirectUrl) {

    var _modal = $("#pnlGenericModal");

    if (_modal) {

        //if (title != undefined && title != null && title != '')
        //    _modal.find('span[id="lblGenericTitle"]').html(title);

        var btnOK = _modal.find('a[id="btnGenericOK"]');

        if (redirectUrl != undefined && redirectUrl != null && redirectUrl != '') {
            btnOK.attr("href", redirectUrl);
            _modal.attr("data-backdrop", "static");
        } else {
            btnOK.attr("data-dismiss", "modal");
        }

        //_modal.find('small[id="lblGenericText"]').html(message);
        _modal.find('span[id="lblGenericTitle"]').html(message);
        _modal.modal("show");
    }
}

///Inicializa la funcionalidad de Cerrado de los mensajes Informativos
///Actualiza un HiddenField para mantener su estado durante los PostBack
function InitDismissableAlerts() {

    var _alertSelector = "div[data-toggle='infoAlert']";

    $(_alertSelector).find("a").on("click", function () {
        var parent = $(this).closest(_alertSelector);
        parent.find("input:hidden").val("1");
        parent.hide();
    });
}

///Habilita la impresión de la pagina actual, utilizando el framework del browser
function printWindow() {
    window.print();

    return false;
}

///EP-037 Habilita la impresión de la etiqueta DIV, utilizando el framework del browser
function printPopUp() {
    //window.print();
    var ficha = document.getElementById("_StatusPrint").innerHTML;
    //var ventimp = window.open(' ', 'popimpr');
    var contenidoOriginal = document.body.innerHTML;

    document.body.innerHTML = ficha;
    window.print();

    //frameDoc.document.write('<html><head><title>DIV Contents</title>');
    //frameDoc.document.write('</head><body>');
    //ventimp.document.write(ficha.innerHTML);
    //frameDoc.document.write('</body></html>');
    //ventimp.document.close();
    //ventimp.print();
    //ventimp.close();
    return false;
}

///Abre una pantalla para visualizar los el link de algunos botones
///Evento comunmente utilizado en los Badges de los Logos de Certificaciones de eCollect
function openOnWindow(mylink, windowname) {
    if (!window.focus) return true; var href;
    if (typeof (mylink) == 'string') href = mylink;
    else href = mylink.href; window.open(href, windowname, 'width=610,height=630,scrollbars=yes');
    return false;
}

///Limpia los controles contenidos en el sender y reestablece los validadores asociados
///Método comunmente utilizado al cerrar un Modal
function clearControls(sender, validationGroup) {

    sender.find("input[type=text], input[type=password], input[type=hidden], textarea, select").each(function () {

        if ($(this).is("input, textarea"))
            $(this).val('');

        if ($(this).is("select"))
            $(this).val('');
    });

    resetValidators(validationGroup);
}

///Reestablece los validadores con el validationGroup
///Método comunmente utilizado al cerrar un Modal que contiene un formulario
function resetValidators(validationGroup) {

    if (typeof (Page_Validators) != "undefined") {
        for (var i = 0; i < Page_Validators.length; i++) {
            var validator = Page_Validators[i];

            if (validationGroup == undefined || validationGroup == validator.validationGroup) {
                validator.isvalid = true;
                ValidatorUpdateDisplay(validator);
            }
        }
    }
}

///Valida que se haya llenado el formulario de Recuperación de Contraseñas
function validateChangePassForm(validationMessage) {

    try {
        PNotify.removeAll();

        var _isValid = hideValidationModal('pnlChangePassModal', 'vgPass');

        if (!_isValid)
            throw validationMessage;

    } catch (e) {
        showPNotificaction('', e, 'alert-info', true);
        return false;
    }
}

///Establece el texto a mostrar en el Loader que se obtiene del attr loader-text del objeto sender
function setLoaderText(sender) {

    var _loaderText = $(sender).data('loader-text');

    if (_loaderText) {
        $('#upnlLoader div[data-loader="Container"]').addClass('loader-container-text');
        $('#upnlLoader h5').text(_loaderText);
    }
}

///Inicializa un control de autocompletado en el elemento especificado
function OnAutocomplete() {

    var sender = $(this);
    var input = $(this).is('div') ? $(this).find('input:text') : $(this);
    var idHolder = $(sender.attr("data-id-holder"));
    var ctrlPostback = $(sender.attr("data-postback"));
    var clearPostback = $(sender.attr("data-clear-postback"));
    var _required = sender.attr("data-must-select") ? sender.attr("data-must-select") : "true";
    var _appendTo = sender.attr("data-appendto") ? sender.attr("data-appendto") : 'body';
    var _minLength = sender.attr("data-length") ? sender.attr("data-length") : 1;
    var _webMethod = sender.attr("data-metodo");

    input.on("keydown", function (e) {
        if (idHolder.length > 0 && (e.keyCode === 46 || e.keyCode === 8))
            idHolder.val('');
    });

    input.autocomplete({
        appendTo: _appendTo,
        source: function (request, response) {

            if (idHolder.length > 0)
                idHolder.val('');

            var _currentData = {
                text: request.term
            };

            $.ajax({
                url: _autocompleteUrl + _webMethod,
                data: JSON.stringify(_currentData),
                dataType: "json",
                type: "POST",
                contentType: "application/json; charset=utf-8",
                success: function (data) { onSearchingSuccess(data, response); },
                error: onNotSuccess,
                failure: onNotSuccess
            });
        },
        minLength: _minLength,
        select: function (event, ui) { onItemSelected(event, ui, idHolder, ctrlPostback); }
    });

    if (_required === "true")
        input.on('autocompletechange', function (event, ui) { onItemChange(event, ui, idHolder, $(event.target), clearPostback); });

    input.autocomplete("instance")._renderItem = onRenderItem;
}

///Muestra una notificación en caso de que el response del servicio sea un error
function onNotSuccess(response) {
    //EP-115
    //if (response.responseJSON && response.responseJSON.ExceptionType === "AeC.Entities.SessionExpiredException") {
    //    var _ex = JSON.parse(response.responseJSON.Message);
    //    showAlertModal('', _ex.Message, _ex.Index);
    //}
    //else
    //    showAlertNotification('', response.responseText);
}

///Mapea el objeto devuelto por el servicio de autocomplete
function onSearchingSuccess(data, response) {
    response($.map(data.d, function (item) {
        return {
            val: item.Id,
            label: item.Label,
            details: item.Details,
            fullData: item
        };
    }));
}

///Cuando un elemento de la lista de coincidencias es seleccionado, asigna el ID del item y provoca un postback
function onItemSelected(event, ui, idHolder, ctrlPostback) {

    if (idHolder.length > 0) {
        idHolder.val(ui.item.val);
    }

    $(event.target).val(ui.item.label);

    if (ctrlPostback.length > 0) {
        if (ctrlPostback.is('input'))
            ctrlPostback.click();
        else
            ctrlPostback[0].click();
    }
}

///Cuando no se selecciona un elemento de las coincidencias se borra el contenido del elemento y provoca un postback
function onItemChange(event, ui, idHolder, sender, ctrlPostback) {
    if (!ui.item) {

        if (idHolder.length > 0)
            idHolder.val('');

        sender.val("");

        if (ctrlPostback.length > 0) {
            if (ctrlPostback.is('input'))
                ctrlPostback.click();
            else
                ctrlPostback[0].click();
        }
    }
}

///Genera una vista personalizada de cada elemento del autocompletado
function onRenderItem(ul, item) {

    var _header = item.label !== null ? "<div class='ui-menu-item-header'>" + item.label + "</div>" : "";
    var _details = item.details !== null ? "<div class='ui-menu-item-detail'>" + item.details + "</div>" : "";

    return $("<li>")
        .append("<div>" + _header + _details + "</div>")
        .appendTo(ul);
}

///EP-085 Valida que se haya llenado el formulario de Token
function validateTokenForm(validationMessage) {

    try {
        PNotify.removeAll();

        var _isValid = hideValidationModal('pnlToken','vgVerifyToken');

        if (!_isValid)
            throw validationMessage;

    } catch (e) {
        showPNotificaction('', e, 'alert-info', true);
        return false;
    }
}